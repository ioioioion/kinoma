<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright 2011-2014 Marvell Semiconductor, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<program xmlns="http://www.kinoma.com/kpr/1">
    <require path="mobile/dialog" id="DIALOG"/>
    <require path="mobile/model" id="MODEL"/>
    <require path="themes/sample/theme" id="THEME"/>
    <require path="mobile/keyboard" id="KEYBOARD"/>
    <variable id="exp_wet" value="0"/>
   	<variable id="exp_light" value="0"/>
    <!-- ASSETS -->

    <skin id="backgroundSkin" color="#000000"/>
    <skin id="button_temp_Skin" color="#4169E1"/>
    <skin id="button_wet_Skin" color="#6A5ACD"/>
    <skin id="button_light_Skin" color="#FF4040"/>
    <skin id="button_water_Skin" color="#00CD00"/>
    <skin id="button_led_Skin" color="#FF8C00"/>
    <skin id="hiliteSkin" color="#333333"/>
    <skin id="dummuSkin" color="red"/>
    <style id="textStyle" font="16px" color="white" align="center,middle"/>
    <style id="headerStyle" font="bold 16px" color="#444" align="center,bottom"/>
    <style id="buttonStyle" font="bold 16px" color="white" align="center,middle"/>
    <style id="labelStyle" font="bold 16px" color="white" align="center,bottom"/>
    <style id="biglabelStyle" font="bold 24px" color="white" align="center,middle"/>
    <style id="numStyle" font="bold 26px" color="white" align="center,top"/>
    
    <!-- MODEL -->

    <behavior id="ButtonBehavior_temp">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_temp_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_temp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
        <behavior id="ButtonBehavior_temp_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_temp_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_temp_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_wet">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_wet_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_wet_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    <behavior id="ButtonBehavior_wet_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_wet_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_wet_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_light">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:0, left:1, right:1};
            label.skin = button_light_Skin;
            label.style = labelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_light_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
        <behavior id="ButtonBehavior_light_num">
        <method id="onCreate" params="label">
            label.coordinates = {top:0, bottom:1, left:1, right:1};
            label.skin = button_light_Skin;
            label.style = numStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_light_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_water">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:1, left:1, right:1};
            label.skin = button_water_Skin;
            label.style = biglabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
            label.skin = hiliteSkin;
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_water_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>
    
    <behavior id="ButtonBehavior_led">
        <method id="onCreate" params="label">
            label.coordinates = {top:1, bottom:1, left:1, right:1};
            label.skin = button_led_Skin;
            label.style = biglabelStyle;
            label.active = true;
        </method>
        <method id="onTouchBegan" params="label">
            label.skin = hiliteSkin;
        </method>
        <method id="onTouchEnded" params="label">
            label.skin = button_led_Skin;
            this.onTap(label);
        </method>
        <method id="onTap" params="label">
             trace(label.string);
        </method>
    </behavior>

<container id="MainScreen" top="0" left="0" bottom="0" right="0" skin="backgroundSkin">
    <column width="320">
        <line left="0" right="0" height="140">
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Temperature'">
                    <behavior like="ButtonBehavior_temp">
                    </behavior>
                </label>
                <label string="'50 Â°C'">
                    <behavior like="ButtonBehavior_temp_num">
                    </behavior>
                </label>
            </column>
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Soil Humidity'">
                    <behavior like="ButtonBehavior_wet">
                    </behavior>
                </label>
                <label string="'50 %'">
                    <behavior like="ButtonBehavior_wet_num">
                    </behavior>
                </label>
            </column>
            <column top="0" left="0" bottom="0" right="0">
                <label string="'Luminance'">
                    <behavior like="ButtonBehavior_light">
                    </behavior>
                </label>
                <label string="'70 lx'">
                    <behavior like="ButtonBehavior_light_num">
                    </behavior>
                </label>
            </column>
        </line>
        <line left="0" right="0" height="100">
            <label string="'Watering'">
                <behavior like="ButtonBehavior_water">
                    <method id="onTap" params="label">label.invoke(new Message("/Watering"));</method>
                </behavior>
            </label>
            <label string="'Led'">
                <behavior like="ButtonBehavior_led">
                    <method id="onTap" params="label">label.invoke(new Message("/led"));</method>
                </behavior>
            </label>
        </line>
    </column>
</container>
    
    <script><![CDATA[
    application.invoke( new MessageWithObject( "pins:configure", {
        	analogSensor: {
                require: "analog",
                pins: {
                    analogTemp: { pin: 52 }
                }
            }
        } ) );
    	
    
    application.behavior = new MODEL.ApplicationBehavior( application );
    
    var data = {
        title: 'dialog maniacs',
    };
    application.add( new MainScreen(data) );
    
    ]]></script>
    

    <handler path="/Watering">
        <behavior like="MODEL.DialogBehavior">
            <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "slider",
                            label: "Set Soil Humidity",
                            min: 0,
                            max: 100,
                            value: exp_wet,
                            toString: function(val) { return Math.floor(val); }, 
                        },
                        {
                            Item: DIALOG.CheckboxRight,
                            id: "enable_check",
                            label: "Enable",
                        },
                    ],
                    ok: "Go!",
                    cancel: "Close",
                    action: "/printResult",
                };
            </method>
        </behavior>
    </handler>

    <handler path="/led">
        <behavior like="MODEL.DialogBehavior">
             <method id="onDescribe" params="query">
                return {
                    Dialog: DIALOG.Box,
                    title: "Setting",
                    items: [
                        {
                            Item: DIALOG.Slider,
                            id: "slider",
                            label: "Set Luminance",
                            min: 0,
                            max: 100,
                            value: exp_light,
                            toString: function(val) { return Math.floor(val); }, 
                        },
                        {
                            Item: DIALOG.CheckboxRight,
                            id: "enable_check",
                            label: "Enable",
                        },
                    ],
                    ok: "Go!",
                    cancel: "Close",
                    action: "/printResult",
                };
            </method>
        </behavior>
    </handler>

    <handler path="/printResult">
        <behavior like="MODEL.CommandBehavior">
            <method id="onQuery" params="handler, query">
                for (var key in query) {
                    trace(key + ": " + query[key] + "\n");
                }
            </method>
        </behavior>
    </handler>
</program>
